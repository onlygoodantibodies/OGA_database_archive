"""
Django settings for OGA_website project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os 
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-mb78)#ej_8g=30ain=bx$k#15=c0kw(^ircfzudzkqzyy_yq90'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['onlygoodantibodies.com', 'only-good-antibodies.onrender.com', '127.0.0.1', 'oga-website.onrender.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'django_extensions',    
    'academy',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'OGA_website.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'OGA_website.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'core/static')]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email Settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com' 
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'onlygoodantibodies@gmail.com'  
EMAIL_HOST_PASSWORD = 'xaeedguhnmgunirk'

####################
## Todo: Fix this ##
####################

# Protect Session and CSRF Cookies
SESSION_COOKIE_HTTPONLY = True  # Prevents JavaScript from accessing session cookies
CSRF_COOKIE_HTTPONLY = True     # Prevents JavaScript from accessing CSRF tokens

# Enforce Secure Cookies (Only over HTTPS)
SESSION_COOKIE_SECURE = True  # Forces HTTPS-only cookies (prevents theft over HTTP)
CSRF_COOKIE_SECURE = True     # Forces CSRF cookie over HTTPS

# Restrict Cookie Access to Your Website (Prevents Cross-Site Attacks)
SESSION_COOKIE_SAMESITE = 'Lax'  # Allows normal login but prevents CSRF attacks
CSRF_COOKIE_SAMESITE = 'Strict'  # Ensures CSRF token is only sent from your site

# Set Session Expiry (Auto Logout After 30 Minutes)
SESSION_COOKIE_AGE = 1800  # 30 minutes 
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Logs out when browser closes

# Secure Django session cookie
SESSION_COOKIE_NAME = "sessionid"  # Default session cookie name
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript from accessing session
SESSION_COOKIE_SECURE = True  # Only send session cookie over HTTPS
SESSION_COOKIE_SAMESITE = "Lax"  # Prevent cross-site attacks
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Destroy session when browser closes
SESSION_COOKIE_AGE = 1800  # Auto logout after 30 minutes
